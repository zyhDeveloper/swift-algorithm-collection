    /*冒泡排序*/
    func arraySort1(_ arr:[Int])->[Int]{
        var array = arr
        for i in 0 ..< array.count - 1{
            for j in 0 ..< array.count - 1 - i {
                if array[j] > array[j+1] {
                    let temp = array[j]
                    array[j] = array[j+1]
                    array[j+1] = temp
                }
            }
        }
       return array
    }

    /*选择排序*/
    func arraySort2(_ arr:[Int]) -> [Int] {
        var array = arr
        for i in 0 ..< array.count - 1 {
            var min = i
            for j in (i+1) ..< array.count{
                if array[j] < array[min] {
                    min = j
                }
            }
            if i != min {
                let temp = array[i]
                array[i] = array[min]
                array[min] = temp
            }
        }
        return array
    }
    
    /*插入排序*/
    func arraySort3(_ arr:[Int]) -> [Int] {
        var array = arr
        for i in 1 ..< array.count {
            var j = i
            while j > 0 && array[j] < array[j-1] {
                let temp = array[j]
                array[j] = array[j-1]
                array[j-1] = temp
                j -= 1
            }
        }
        return array
    }
    
    /*希尔排序*/
    func arraySort4(_ arr:[Int]) -> [Int] {
        var array = arr
        var k = arr.count/2
        while k > 0 {
            for i in k ..< array.count {
                var j = i - k
                while j >= 0 {
                    if array[j] > array[j+k] {
                        let temp = array[j]
                        array[j] = array[j+k]
                        array[j+k] = temp
                    }
                    j -= k
                }
            }
            k /= 2
        }
        return array
    }
    
    /*归并排序*/
    func arraySort5(_ arr:[Int]) -> [Int] {
        var tempArr:[Array<Int>] = []
        for item in arr {
            var subArr = [Int]()
            subArr.append(item)
            tempArr.append(subArr)
        }
        
        while tempArr.count != 1 {
            var i = 0
            while i < tempArr.count - 1 {
                tempArr[i] = mergeArrar(tempArr[i], tempArr[i+1])
                tempArr.remove(at: i + 1)
                i += 1
            }
        }
        return tempArr.first!
    }
    
    func mergeArrar(_ arr1:[Int], _ arr2:[Int]) -> [Int] {
        var resultArr:[Int] = []
        var firstIndex = 0
        var secondIndex = 0
        while firstIndex < arr1.count && secondIndex < arr2.count {
            if arr1[firstIndex] < arr2[secondIndex] {
                resultArr.append(arr1[firstIndex])
                firstIndex += 1
            }else{
                resultArr.append(arr2[secondIndex])
                secondIndex += 1
            }
        }
        
        while firstIndex < arr1.count {
            resultArr.append(arr1[firstIndex])
            firstIndex += 1
        }
        
        while secondIndex < arr2.count {
            resultArr.append(arr2[secondIndex])
            secondIndex += 1
        }
        return resultArr
    }

   /*快速排序*/
   func position(_ arr: inout [Int],_ start: Int,_ end: Int) -> Int {
        let tag = arr[end]
        var i = start
        for j in start ..< end {
            if arr[j] <= tag {
                arr.swapAt(i, j)
                i += 1
            }
        }
        arr.swapAt(i, end)
        return i
    }

    func quickSort(_ arr: inout [Int], _ start: Int,_ end: Int) {
        if start < end {
            let p = position(&arr, start, end)
            quickSort(&arr, start, p - 1)
            quickSort(&arr, p + 1, end)
        }
    }
    
    /*堆排序*/
    func sortArr(_ array:inout [Int]) {
        //1.构建大顶堆
        var i = array.count/2-1
        while i >= 0 {
            //从第一个非叶子结点从下至上，从右至左调整结构
            adjustArray(&array, i, array.count)
            i -= 1
        }
        
        //2.调整堆结构+交换堆顶元素与末尾元素
        var j = array.count - 1
        while j > 0 {
            array.swapAt(0, j)
            adjustArray(&array, 0, j)
            j -= 1
        }
    }
    
    func adjustArray(_ array:inout [Int],_ i:Int,_ length:Int) {
        let temp = array[i]
        //从i结点的左子结点开始，也就是2i+1处开始
        var k = 2 * i + 1
        var i = i
        while k < length {
            //如果左子结点小于右子结点，k指向右子结点
            if k+1 < length && array[k]<array[k+1]  {
                k += 1
            }
            //如果子节点大于父节点，将子节点值赋给父节点
            if array[k] > temp {
                array[i] = array[k]
                i = k
            }
            k = 2 * k + 1
        }
        array[i] = temp
    }

   /*基数排序*/
   func sortArray(_ array:inout [Int])->[Int] {
        var countArr = Array(repeating: 0, count: array.max()!+1)
        var resultArr = Array(repeating: 0, count: array.count)
        for i in 0 ..< array.count {
            countArr[array[i]] += 1
        }
        var k = 0
        for j in 0 ..< countArr.count {
            while countArr[j] > 0 {
                resultArr[k] = j
                countArr[j] -= 1
                k += 1
             }
        }
        return resultArr
    }

   /*桶排序*/
   func sortArray(_ array:inout [Int],_ gap:Int)->[Int] {
        // 1.建桶
        var bucketList = Array(repeating:[Int](), count: (array.max()!-array.min()!)/gap + 1)
        
        // 2.遍历数组，将元素放入桶里
        for i in 0 ..< array.count {
            let index = (array[i] - array.min()!)/gap
            bucketList[index].append(array[i])
        }
        // 3.对每个桶内部排序
        for i in 0 ..< (array.max()!-array.min()!)/gap + 1 {
            //判断桶是否为空
            if bucketList[i].count > 0 {
                for x in 0 ..< bucketList[i].count - 1 {
                    for y in 0 ..< bucketList[i].count - 1 - x {
                        if bucketList[i][y] > bucketList[i][y+1] {
                            bucketList[i].swapAt(y, y+1)
                        }
                    }
                }
            }
        }
        // 4.取出桶内元素
        var arr:[Int] = []
        for i in 0 ..< (array.max()!-array.min()!)/gap + 1 {
            let bucket:[Int] = bucketList[i]
            if bucket.count > 0 {
                arr += bucket
            }
        }
        return arr
    }
    
    /*基数排序*/
     func sortArray(_ array:inout [Int],_ count:Int) {
        var tempArr:[Array<Int>] = [[Int]]()
        //1.创建10个容器
        for _ in 0 ..< 10 {
            tempArr.append(Array(repeating: 0, count: count+1))
        }
        //2.遍历数组放入容器
        let keyNum = 3 //最大数字的位数
        for i in 1 ... keyNum {//分配
            for j in 0 ..< count {
                let num = getNum(array[j], i)
                tempArr[num][0] += 1
                let index = tempArr[num][0]
                tempArr[num][index] = array[j]
            }
            var k = 0
            for x in 0 ..< 10 {//取出
                if tempArr[x][0] != 0 {
                    for n in 1 ... tempArr[x][0] {
                        array[k] = tempArr[x][n]
                        k += 1
                    }
                tempArr[x][0] = 0
                }
            }
       }
    }
    func getNum(_ num:Int,_ tag:Int) -> Int {
        var temp = 1
        for _ in 0 ..< tag - 1 {
            temp *= 10
        }
        return (num/temp)%10
    }
